-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_BUS_1 is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic;
    
    in_0: in std_logic_vector ((Bits-1) downto 0);
    in_1: in std_logic_vector ((Bits-1) downto 0) );
end MUX_GATE_BUS_1;

architecture Behavioral of MUX_GATE_BUS_1 is
begin
  with sel select
    p_out <=
      in_0 when '0',
      in_1 when '1',
      (others => '0') when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

entity DIG_Add is
  generic ( Bits: integer ); 
  port (
    s: out std_logic_vector((Bits-1) downto 0);
    c_o: out std_logic;
    a: in std_logic_vector((Bits-1) downto 0);
    b: in std_logic_vector((Bits-1) downto 0);
    c_i: in std_logic );
end DIG_Add;

architecture Behavioral of DIG_Add is
   signal temp : std_logic_vector(Bits downto 0);
begin
   temp <= ('0' & a) + b + c_i;

   s    <= temp((Bits-1) downto 0);
   c_o  <= temp(Bits);
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity COMP_GATE_UNSIGNED is
  generic ( Bits : integer );
  port (
    gr: out std_logic;
    eq: out std_logic;
    le: out std_logic;
    a: in std_logic_vector ((Bits-1) downto 0);
    b: in std_logic_vector ((Bits-1) downto 0) );
end COMP_GATE_UNSIGNED;

architecture Behavioral of COMP_GATE_UNSIGNED is
begin
  process(a, b)
  begin
    if (a > b ) then
      le <= '0';
      eq <= '0';
      gr <= '1';
    elsif (a < b) then
      le <= '1';
      eq <= '0';
      gr <= '0';
    else
      le <= '0';
      eq <= '1';
      gr <= '0';
    end if;
  end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_BUS_2 is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic_vector (1 downto 0);
    
    in_0: in std_logic_vector ((Bits-1) downto 0);
    in_1: in std_logic_vector ((Bits-1) downto 0);
    in_2: in std_logic_vector ((Bits-1) downto 0);
    in_3: in std_logic_vector ((Bits-1) downto 0) );
end MUX_GATE_BUS_2;

architecture Behavioral of MUX_GATE_BUS_2 is
begin
  with sel select
    p_out <=
      in_0 when "00",
      in_1 when "01",
      in_2 when "10",
      in_3 when "11",
      (others => '0') when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    OP: in std_logic_vector(1 downto 0);
    A: in std_logic_vector(15 downto 0);
    B: in std_logic_vector(15 downto 0);
    Ainv: in std_logic;
    Binv: in std_logic;
    Cin: in std_logic;
    S: out std_logic_vector(15 downto 0);
    Cout: out std_logic;
    Zero: out std_logic;
    Overflow: out std_logic);
end main;

architecture Behavioral of main is
  signal s0: std_logic_vector(15 downto 0);
  signal s1: std_logic_vector(15 downto 0);
  signal s2: std_logic_vector(15 downto 0);
  signal s3: std_logic_vector(15 downto 0);
  signal s4: std_logic_vector(15 downto 0);
  signal s5: std_logic_vector(15 downto 0);
  signal s6: std_logic_vector(15 downto 0);
  signal s7: std_logic_vector(15 downto 0);
  signal s8: std_logic;
  signal s9: std_logic;
begin
  s5 <= NOT A;
  s6 <= NOT B;
  gate0: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 16)
    port map (
      sel => Ainv,
      in_0 => A,
      in_1 => s5,
      p_out => s0);
  gate1: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 16)
    port map (
      sel => Binv,
      in_0 => B,
      in_1 => s6,
      p_out => s1);
  s2 <= (s0 AND s1);
  s3 <= (s0 OR s1);
  gate2: entity work.DIG_Add
    generic map (
      Bits => 16)
    port map (
      a => s0,
      b => s1,
      c_i => Cin,
      s => s4,
      c_o => Cout);
  gate3: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 16)
    port map (
      a => s0,
      b => s1,
      le => s8);
  s7(0) <= s8;
  s7(15 downto 1) <= "000000000000000";
  s9 <= s4(15);
  gate4: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 16)
    port map (
      sel => OP,
      in_0 => s2,
      in_1 => s3,
      in_2 => s4,
      in_3 => s7,
      p_out => S);
  Zero <= NOT (s4(0) OR s4(1) OR s4(2) OR s4(3) OR s4(4) OR s4(5) OR s4(6) OR s4(7) OR s4(8) OR s4(9) OR s4(10) OR s4(11) OR s4(12) OR s4(13) OR s4(14) OR s9);
  Overflow <= (s9 XOR NOT (s0(15) XOR s1(15)));
end Behavioral;
